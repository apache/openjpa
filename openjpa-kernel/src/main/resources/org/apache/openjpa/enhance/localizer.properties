needs-runtime-enhance: "{0}" requires runtime enhancement: {1}
runtime-enhance-pcclasses: You have enabled runtime enhancement, but have not \
	specified the set of persistent classes.  OpenJPA must look for metadata for \
	every loaded class, which might increase class load times significantly.
running-all-classes: No targets were given.  Running on all classes listed in \
	org.apache.openjpa.PersistentClasses, or all metadata files in classpath directories if \
	the property is not specified.
detach-custom-ser: Type "{0}" is set to detach on serialize, but implements \
	a custom readObject and/or writeObject method.  You cannot use custom \
	serialization with detachment. 
detach-custom-extern: Type "{0}" is set to detach on serialize, but implements \
	a custom readExternal and/or writeExternal method.  You cannot use custom \
	serialization with detachment. 
enhance-start: Enhancing type "{0}".
pc-type: Type "{0}" is already persistence capable; skipping.
pers-aware: Type "{0}" has no metadata; enhancing as persistence aware. \
	If you intended for "{0}" to be persistence-capable, then this means that \
	OpenJPA could not find any metadata for "{0}". This can happen if the \
	directory containing your metadata is not in your CLASSPATH, or if your \
	metadata files are not named properly. See the documentation on metadata \
	placement for more information.
enhance-running: Enhancer running on type "{0}".
enhance-running-oids: Enhancer running on oid: {0}
enhance-aware: The class does not have metadata - enhanced as persistence-aware.
enhance-norun: The class is already persistence capable - no enhancement \
	performed.
enhance-usage: Usage: java org.apache.openjpa.enhance.PCEnhancer\n\
	\t[-properties/-p <properties file or resource>]\n\
	\t[-<property name> <property value>]*\n\
	\t[-directory/-d <output directory>]\n\
	\t[-addDefaultConstructor/-adc <true/t | false/f>]\n\
	\t[-jdoEnhance/-jdo <true/t | false/f>]\n\
	\t[-enforcePropertyRestrictions/-epr <true/t | false/f>]\n\
	\t[-tmpClassLoader/-tcl <true/t | false/f>]\n\
	\t<class name | .java file | .class file | .jdo file>+ 
enhance-defaultconst: The type "{0}" must have a no-args constructor.
enhance-adddefaultconst: The type "{0}" must have a no-args constructor. \
	Adding a {1} no-args constructor.
enhance-cloneable:The type "{0}" implements Cloneable but does not call \
	super.clone ().  Adding protected super.clone () invocation.
enhance-uid-access: An IllegalAccessException occured when trying to \
	obtain the serialVersionUID field for the class "{0}". This is a known \
	bug in JDK 1.4+ when using a custom ClassLoader to enhance a \
	class that implements java.io.Serializable. If compatibility with \
	non-enhanced versions of "{0}" is not needed, this warning can be ignored.
enhance-oid: Enhancing object id type "{0}" to allow member access. 
cons-access: An error occurred trying to instantiate a custom storage class.
pcdata-generate: Generating dynamic PCData for type: "{0}"
pcdata-created: Dynamic PCData created: name="{0}", for type="{1}"
factory-not-oidloader: Attempt to run the application id tool under metadata \
	configuration that does not support it.  The application id tool can only \
	run under certain metadata factory settings.
str-cons: The id type "{0}" specfied by persistent type "{1}" does not have a \
	public string or class + string constructor.
appid-start: Generating an application id for type "{0}".
appid-invalid: Type "{0}" does not have metadata, does not use application \
	identity, uses a built-in identity type, or inherits the identity class \
	from its superclass. 
appid-warn: Type "{0}" does not have metadata, does not use application \
	identity, or inherits the identity class from its superclass; skipping.
name-mult-args: When you supply the -name option, you must run the tool on \
	exactly one class.  Attempt to run on multiple classes: {0}
no-id-class: Type "{0}" does not declare an id class.
no-pks: Type "{0}" does not declare any primary key fields.
appid-running: Application identity tool running on type "{0}".
appid-output: Writing application identity class to file "{0}". 
appid-norun: No identity class was generated for this type.
appid-usage: Usage: java org.apache.openjpa.enhance.ApplicationIdTool\n\
	\t[-properties/-p <properties file or resource>]\n\
	\t[-<property name> <property value>]*\n\
	\t[-ignoreErrors/-i <true/t | false/f>]*\n\
	\t[-directory/-d <output directory>]\n\
	\t[-name/-n <id class name>]\n\
	\t[-suffix/-s <id class suffix>]\n\
	\t[-token/-t <token>]\n\
	\t[-codeFormat/-cf.<property name> <property value>]*\n\
	\t<class name | .java file | .class file | .jdo file>+ 
appid-comment-for: Application identity class for: {0}
appid-comment-gen: Auto-generated by:
property-violations: Detected the following possible violations of the \
	restrictions placed on property access persistent types:\n{0}
property-field-access: "{1}" uses property access, but its field "{2}" is \
	accessed directly in method "{3}" defined in "{0}".
property-bad-member: The member for for persistent property "{0}" was not \
	a method: "{1}".
property-no-getter: No getter method found for persistent property "{0}".  All \
	persistent properties must have getter methods.
property-no-setter: No setter method found for persistent property "{0}", and \
	bytecode analysis of the getter did not reveal a clear backing field. \
	Please create a setter method for this property (it may be private). 
property-setter-getter-mismatch: Bytecode analysis of the setter and getter \
	methods for persistent property "{0}" indicates that the two methods \
	might be acting on different backing fields.  The setter method assigns to \
	field "{1}", while the getter method returns field "{2}".
cft-exception-thrown: An exception was thrown while attempting to perform \
	class file transformation on "{0}":
