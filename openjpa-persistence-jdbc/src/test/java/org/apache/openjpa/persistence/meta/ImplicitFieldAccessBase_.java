/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

/**
 *  Generated by OpenJPA MetaModel Generator Tool.
**/

package org.apache.openjpa.persistence.meta;

import jakarta.persistence.metamodel.CollectionAttribute;
import jakarta.persistence.metamodel.ListAttribute;
import jakarta.persistence.metamodel.MapAttribute;
import jakarta.persistence.metamodel.SetAttribute;
import jakarta.persistence.metamodel.SingularAttribute;

@jakarta.persistence.metamodel.StaticMetamodel
(value=org.apache.openjpa.persistence.meta.ImplicitFieldAccessBase.class)
public class ImplicitFieldAccessBase_ extends ImplicitFieldAccessMappedSuperclass_  {
    public static volatile SingularAttribute<ImplicitFieldAccessBase,Integer> boxedInt;
    public static volatile CollectionAttribute<ImplicitFieldAccessBase,ExplicitFieldAccess> collectionRelation;
    public static volatile SingularAttribute<ImplicitFieldAccessBase,String> f0;
    public static volatile ListAttribute<ImplicitFieldAccessBase,ExplicitFieldAccess> listRelation;
    public static volatile MapAttribute<ImplicitFieldAccessBase,Integer,ExplicitFieldAccess> mapRelationKeyBasic;
    public static volatile MapAttribute<ImplicitFieldAccessBase,ExplicitPropertyAccess,ExplicitFieldAccess> mapRelationKeyPC;
    public static volatile SingularAttribute<ImplicitFieldAccessBase,ExplicitFieldAccess> one2oneRelation;
    public static volatile SingularAttribute<ImplicitFieldAccessBase,Integer> primitiveInt;
    public static volatile SetAttribute<ImplicitFieldAccessBase,ExplicitFieldAccess> setRelation;
}
